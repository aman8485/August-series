1-class Solution {
    public int[] asteroidCollision(int[] arr) {
        List<Integer> lst=new ArrayList<>();
        for(int i=0;i<arr.length;i++){
            if(arr[i]>0){
                lst.add(arr[i]);
            }else{
                while(!lst.isEmpty() && lst.get(lst.size()-1)>0 && lst.get(lst.size()-1)<Math.abs(arr[i])){
                    lst.remove(lst.size()-1);
                }
                if(!lst.isEmpty() && lst.get(lst.size()-1)==Math.abs(arr[i])){
                    lst.remove(lst.size()-1);
                }else if(lst.isEmpty() || lst.get(lst.size()-1)<0){
                    lst.add(arr[i]);
                }
            }
        }
        int []res=new int[lst.size()];
        for(int j=0;j<lst.size();j++){
            res[j]=lst.get(j);
        }
        return res;
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
2- Leetcode 2104 Sum of subarrays ranges
Brute Force--
class Solution {
    public long subArrayRanges(int[] arr) {
        long sum=0;
        int n=arr.length;
        for(int i=0;i<n;i++){
            int small=arr[i];
            int large=arr[i];
            for(int j=i;j<n;j++){
                small=Math.min(small,arr[j]);
                large=Math.max(large,arr[j]);
                sum+=(large-small);
            }
        }
        return sum;
    }
}

Optimal Solution--------------

class Solution {
     private int[] findNSE(int[] arr) {
        
     
        int n = arr.length;
        
     
        int[] ans = new int[n];
        
        // Stack 
        Stack<Integer> st = new Stack<>();
        

        for (int i = n - 1; i >= 0; i--) {
            
            // Get the current element
            int currEle = arr[i];
            while (!st.isEmpty() && arr[st.peek()] >= currEle) {
                st.pop();
            }
            
       
            ans[i] = !st.isEmpty() ? st.peek() : n;
          
            st.push(i);
        }
        
   
        return ans;
    }
    
    /* Function to find the indices of 
    next greater elements */
    private int[] findNGE(int[] arr) {
        
        // Size of array
        int n = arr.length;
        
        // To store the answer
        int[] ans = new int[n];
        
        // Stack 
        Stack<Integer> st = new Stack<>();
        
        // Start traversing from the back
        for (int i = n - 1; i >= 0; i--) {
            
            // Get the current element
            int currEle = arr[i];
            
            /* Pop the elements in the stack until 
            the stack is not empty and the top 
            element is not the greater element */
            while (!st.isEmpty() && arr[st.peek()] <= currEle) {
                st.pop();
            }
            
            // Update the answer
            ans[i] = !st.isEmpty() ? st.peek() : n;
            
            /* Push the index of current 
            element in the stack */
            st.push(i);
        }
        
        // Return the answer
        return ans;
    }
    
    /* Function to find the indices of 
    previous smaller or equal elements */
    private int[] findPSEE(int[] arr) {
        
        // Size of array
        int n = arr.length;
        
        // To store the answer
        int[] ans = new int[n];
        
        // Stack 
        Stack<Integer> st = new Stack<>();
        
        // Traverse on the array
        for (int i = 0; i < n; i++) {
            
            // Get the current element
            int currEle = arr[i];
            
            /* Pop the elements in the stack until 
            the stack is not empty and the top 
            elements are greater than the current element */
            while (!st.isEmpty() && arr[st.peek()] > currEle) {
                st.pop();
            }
            
            // Update the answer
            ans[i] = !st.isEmpty() ? st.peek() : -1;
            
            /* Push the index of current 
            element in the stack */
            st.push(i);
        }
        
        // Return the answer
        return ans;
    }
    
    /* Function to find the indices of 
    previous greater or equal elements */
    private int[] findPGEE(int[] arr) {
        
        // Size of array
        int n = arr.length;
        
        // To store the answer
        int[] ans = new int[n];
        
        // Stack 
        Stack<Integer> st = new Stack<>();
        
        // Traverse on the array
        for (int i = 0; i < n; i++) {
            
            // Get the current element
            int currEle = arr[i];
            
            /* Pop the elements in the stack until 
            the stack is not empty and the top 
            elements are smaller than the current element */
            while (!st.isEmpty() && arr[st.peek()] < currEle) {
                st.pop();
            }
            
            // Update the answer
            ans[i] = !st.isEmpty() ? st.peek() : -1;
            
            /* Push the index of current 
            element in the stack */
            st.push(i);
        }
        
        // Return the answer
        return ans;
    }
    
    /* Function to find the sum of the 
    minimum value in each subarray */
    private long sumSubarrayMins(int[] arr) {
        
        int[] nse = findNSE(arr);
        
        int[] psee = findPSEE(arr);
        
        // Size of array
        int n = arr.length;
        
        // To store the sum
        long sum = 0;
        
        // Traverse on the array
        for (int i = 0; i < n; i++) {
            
            // Count of first type of subarrays
            int left = i - psee[i];
            
            // Count of second type of subarrays
            int right = nse[i] - i;
            
            /* Count of subarrays where 
            current element is minimum */
            long freq = left * right * 1L;
            
            // Contribution due to current element 
            long val = (freq * arr[i] * 1L);
            
            // Updating the sum
            sum += val;
        }
        
        // Return the computed sum
        return sum;
    }
    
    /* Function to find the sum of the 
    maximum value in each subarray */
    private long sumSubarrayMaxs(int[] arr) {
        
        int[] nge = findNGE(arr);
        
        int[] pgee = findPGEE(arr);
        
        // Size of array
        int n = arr.length;
        
        // To store the sum
        long sum = 0;
        
        // Traverse on the array
        for (int i = 0; i < n; i++) {
            
            // Count of first type of subarrays
            int left = i - pgee[i];
            
            // Count of second type of subarrays
            int right = nge[i] - i;
            
            /* Count of subarrays where 
            current element is maximum */
            long freq = left * right * 1L;
            
            // Contribution due to current element 
            long val = (freq * arr[i] * 1L);
            
            // Updating the sum
            sum += val;
        }
        
        // Return the computed sum
        return sum;
    }
    public long subArrayRanges(int[] arr) {
         return ( sumSubarrayMaxs(arr) - 
                 sumSubarrayMins(arr) );
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
3-Leetcode Remove K digits

class Solution {
    public String removeKdigits(String arr, int k) {
        Stack<Character> st=new Stack<>();
        for(int i=0 ; i < arr.length();i++){
            char curr=arr.charAt(i);
            while(!st.isEmpty() && k>0 && st.peek()>curr){
                st.pop();
                k--;
            }
            st.push(curr);
        }
    while(!st.isEmpty() && k>0){
        st.pop();
        k--;
       }
       if(st.isEmpty()) return "0";
       StringBuilder ans=new StringBuilder();
       while(!st.isEmpty()){
        ans.append(st.pop());
       }
       while(ans.length()>0 && ans.charAt(ans.length()-1)=='0'){
        ans.deleteCharAt(ans.length()-1);
       }
       ans.reverse();
       if(ans.length()==0)return "0";
       return ans.toString();
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

4- Leetcode Min Stack

class MinStack {
    // Initialize a stack
    private Stack<int[]> st;

    // Empty Constructor
    public MinStack() {
        st = new Stack<>();
    }

    // Method to push a value in stack
    public void push(int value) {
        // If stack is empty
        if (st.isEmpty()) {
            // Push current value as minimum
            st.push(new int[]{value, value});
            return;
        }

        // Update the current minimum
        int mini = Math.min(getMin(), value);

        // Add the pair to the stack
        st.push(new int[]{value, mini});
    }

    // Method to pop a value from stack
    public void pop() {
        // Using in-built pop method
        st.pop();
    }

    // Method to get the top of stack
    public int top() {
        // Return the top value
        return st.peek()[0];
    }

    // Method to get the minimum in stack
    public int getMin() {
        // Return the minimum
        return st.peek()[1];
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------=
5-Leetcode 4Sum

class Solution {
    public List<List<Integer>> fourSum(int[] arr, int target) {
         Arrays.sort(arr);
        List<List<Integer>> res=new ArrayList<>();
        for(int i=0;i<arr.length;i++){
                if(i>0 && arr[i]==arr[i-1])continue;
            for(int j=i+1;j<arr.length;j++){
            
                if(j>i+1 && arr[j]==arr[j-1]) continue;
                int k=j+1;
                int l=arr.length-1;
                while(k<l){

                    long sum=(long)arr[i]+arr[j]+arr[k]+arr[l];
                    if(sum==target){
                        List<Integer> temp=Arrays.asList(arr[i],arr[j],arr[k],arr[l]);
                        res.add(temp);
                        k++;
                        l--;
                        while(k<l && arr[k]==arr[k-1])k++;
                        while(k<l && arr[l]==arr[l+1])l--;
                    }else if(sum<target){
                        k++;
                    }else{
                        l--;
                    }
                }
            }
        }
        return res;
     
        
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

6- Leetcode two sum

class Solution {
    public int[] twoSum(int[] arr, int x) {
        int []ans=new int[2];
        int n=arr.length;
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<n;i++){
            int rem=x-arr[i];
            if(map.containsKey(rem)){
               ans[0]=i;
               ans[1]=map.get(rem);
               break;
            }else{
                map.put(arr[i],i);
            }
        }
        return ans;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

7- Leetcode Trapping Rain water

class Solution {
    public int trap(int[] arr) {
        int n=arr.length;
        int total=0;
        int leftmax=0;
        int rightmax=0;
        int left=0;
        int right=n-1;
        while(left<right){
            if(arr[left]<arr[right]){
                if(leftmax>arr[left]){
                    total+=leftmax-arr[left];

                }else{
                    leftmax=arr[left];

                }
                left+=1;
            }
            else{
                if(rightmax>arr[right]){
                    total+=rightmax-arr[right];
                }else{
                    rightmax=arr[right];
                }
                right-=1;
            }
        }
       return total;
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
8- Leetcode Largest Rectangle In Histogram #Hard

class Solution {
    public int largestRectangleArea(int[] arr) {
        int n=arr.length;
        Stack<Integer> st=new Stack<>();
        int nse,pse;
        int area;
        int largearea=0;
        for(int i=0;i<n;i++){
            while(!st.isEmpty() && arr[st.peek()]>=arr[i]){
                int idx=st.pop();
                nse=i;
                pse=st.isEmpty() ? -1:st.peek();
                area=arr[idx]*(nse-pse-1);
                largearea=Math.max(largearea,area);
            }
            st.push(i);
        }
        while(!st.isEmpty()){
            nse=n;
            int ind=st.pop();
            pse=st.isEmpty() ? -1:st.peek();
            area=arr[ind]*(nse-pse-1);
            largearea=Math.max(largearea,area);
        }
       return largearea;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 9- Leetcode Maximal Rectangle
import java.util.Stack;

class Solution {
    private static int[] nextSmaller(int[] heights, int n) {
        Stack<Integer> stk = new Stack<>();
        stk.push(-1);
        int[] answer = new int[n];
        for(int i=n-1;i>=0;i--) {
            int curr = heights[i];
            while(stk.peek()!= -1 && heights[stk.peek()] >= curr) {
                stk.pop();
            }
            answer[i] = stk.peek();
            stk.push(i);
        }
        return answer;
    }

    private static int[] prevSmaller(int[] heights, int n) {
        Stack<Integer> stk = new Stack<>();
        stk.push(-1);
        int[] answer = new int[n];
        for(int i=0;i<n;i++) {
            int curr = heights[i];
            while(stk.peek()!= -1 && heights[stk.peek()] >= curr) {
                stk.pop();
            }
            answer[i] = stk.peek();
            stk.push(i);
        }
        return answer;
    }

    private int largestRectangleArea(int[] heights, int n) {

        int[] next = nextSmaller(heights,n);

        int[] prev = prevSmaller(heights,n);

        int area = 0;
        for(int i=0;i<n;i++) {
            int length = heights[i];
            if(next[i] == -1) {
                next[i] = n;
            }
            int breadth = next[i] - prev[i] - 1;

            int newarea = length*breadth;
            area = Math.max(area,newarea);
        }
        return area;
    }

    public int maximalRectangle(char[][] matrix) {
        if(matrix.length == 0) return 0;

        int row = matrix.length;
        int col = matrix[0].length;

        int[] heights = new int[col];
        int maxArea = 0;

        for(int i=0;i<row;i++) {
            for(int j=0;j<col;j++) {
                if(matrix[i][j] == '1') {
                    heights[j] += 1;
                } else {
                    heights[j] = 0;
                }
            }
            maxArea = Math.max(maxArea, largestRectangleArea(heights,col));
        }
        return maxArea;
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
10 -Leetcode Spiral Matrix

class Solution {
    public List<Integer> spiralOrder(int[][] arr) {
        ArrayList<Integer> ans=new ArrayList<>();
        int left=0;
        int n=arr.length;
        int m=arr[0].length;
        int right=m-1;
        int top=0;
        int bottom=n-1;
        while(left<=right && top<=bottom){
            for(int i=left;i<=right;i++){
                ans.add(arr[top][i]);
            }
            top++;
            for(int i=top;i<=bottom;i++){
                ans.add(arr[i][right]);
            }
            right--;
            if(top<=bottom){
            for(int i=right;i>=left;i--){
                ans.add(arr[bottom][i]);
            }
            bottom--;
            }
            if(left<=right){
            for(int i=bottom;i>=top;i--){
                ans.add(arr[i][left]);
            }
            left++;
            }
        }
        return ans;
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
11- Sum of N Natural Numbers Using recursion

class Solution {
    public int NnumbersSum(int N) {
        //your code goes here
        if(N==0)return 0;
        return N+NnumbersSum(N-1);

    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
12- Majority Element 

class Solution {
    public int majorityElement(int[] arr) {
        int cnt=-1;
        int n=arr.length;
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<arr.length;i++){
            map.put(arr[i],map.getOrDefault(arr[i],0)+1);
        }
        for(int ele:arr){
            if(map.get(ele)>n/2){
                cnt=ele;
            }
        }
        return cnt;
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
13- Subsets using recursion

class Solution {
    public void helper(int[] nums, int idx, List<List<Integer>> res, ArrayList<Integer> ds) {
        if (idx >= nums.length) {
            res.add(new ArrayList<>(ds));
            return;
        }
        ds.add(nums[idx]);
        helper(nums, idx + 1, res, ds);
        ds.remove(ds.size() - 1);
        helper(nums, idx + 1, res, ds);
    }

    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        ArrayList<Integer> ds = new ArrayList<>();
        helper(nums, 0, res, ds);
        return res;
    }
}
